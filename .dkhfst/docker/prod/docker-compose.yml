name: ${PROJECT_MODE}-${PROJECT_NAME} 

services: 
  # --- MAIN DATABASE CONFIGURATION --- # 
  db-main: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_db-main
    build: 
      context: ./db-main
      dockerfile: Dockerfile
      args: 
        DB_MAIN_VERSION: ${DB_MAIN_VERSION}
    restart: unless-stopped 
    ports: 
      - "1001:5432"
    env_file:
      - ../../../.env 
      - .env
    user: root 
    command: sh /home/postgres/main/start.sh
    volumes: 
      - ../../:/home/postgres/context
      - db-main:/var/lib/postgres/data
      - ./db-main:/home/postgres/main
      - ./@certs:/home/postgres/raw-certs
    networks: 
      - project

  # --- CACHE DATABASE CONFIGURATION --- # 
  db-cache: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_db-cache
    build: 
      context: ./db-cache
      dockerfile: Dockerfile
      args: 
        DB_CACHE_VERSION: ${DB_CACHE_VERSION}
    restart: unless-stopped 
    ports: 
      - "5433:5432"
    env_file:
      - ../../../.env 
      - .env
    user: root 
    command: sh /home/postgres/main/start.sh
    volumes: 
      - ../../:/home/postgres/context
      - db-cache:/var/lib/postgres/data
      - ./db-cache:/home/postgres/main
      - ./@certs:/home/postgres/raw-certs
    networks: 
      - project

  # --- QUEUE DATABASE CONFIGURATION --- # 
  db-queue: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_db-queue
    build: 
      context: ./db-queue
      dockerfile: Dockerfile
      args: 
        DB_QUEUE_VERSION: ${DB_QUEUE_VERSION}
    restart: unless-stopped 
    ports: 
      - "5434:5432"
    env_file:
      - ../../../.env 
      - .env
    user: root 
    command: sh /home/postgres/main/start.sh
    volumes: 
      - ../../:/home/postgres/context
      - db-queue:/var/lib/postgres/data
      - ./db-queue:/home/postgres/main
      - ./@certs:/home/postgres/raw-certs
    networks: 
      - project

  # --- SET UP ADMINER --- # 
  adminer:
    build: 
      context: ./adminer
      dockerfile: Dockerfile
      args: 
        ADMINER_PHP_VERSION: ${ADMINER_PHP_VERSION}
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_adminer
    volumes: 
      - ./adminer/app:/var/www/html/
    networks:
      - project

  adminer-server: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_adminer-server
    env_file:
      - ../../../.env 
      - .env
    image: ${ADMINER_NGINX_VERSION}
    volumes:
      - ./adminer/app:/var/www/html/
      - ./adminer/site.conf:/etc/nginx/conf.d/default.conf
      - ./@certs:/certs
    depends_on: 
      - adminer
    networks:
      - project

  # --- SET UP POSTFIX --- # 
  postfix-server: 
    build: 
      context: ./postfix
      dockerfile: Dockerfile
      args: 
        POSTFIX_DEBIAN_VERSION: ${POSTFIX_DEBIAN_VERSION}
    user: root
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_postfix-server
    command: sh /home/app/main/start.sh
    hostname: mail.example.com
    ports: 
      - "1025:25"
    environment:
      - MAIL_DOMAIN=${PROJECT_NAME}.test
      - RELAY_HOST=postfix.${PROJECT_NAME}.test:587
      - RELAY_USER=${RELAY_USER}
      - RELAY_PASSWORD=${RELAY_PASSWORD}
    volumes:
      - postfix-data:/var/spool/postfix
      - ./@certs:/certs
      - ./postfix:/home/app/main
    restart: unless-stopped
    networks: 
      - project

  # --- SET UP BACKEND --- # 
  backend: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_backend
    env_file:
      - ../../../.env 
      - .env
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args: 
        BACKEND_PHP_VERSION: ${BACKEND_PHP_VERSION}
    working_dir: /home/app/source
    command: sh /home/app/main/start.sh
    volumes: 
      - ../../../source/backend:/home/app/source
      - ./backend:/home/app/main/
      - ./@certs:/certs
    depends_on: 
      - db-main
      - db-cache
      - db-queue
    networks:
      - project

  backend-server: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_backend-server
    env_file:
      - ../../../.env 
      - .env
    image: ${BACKEND_NGINX_VERSION}
    volumes:
      - ../../../source/backend:/home/app/source
      - ./backend:/home/app/main/
      - ./backend/site.conf:/etc/nginx/conf.d/default.conf
      - ./@certs:/certs
    depends_on:
      - backend
    networks:
      - project

  # --- SET UP QUEUE ---  #
  queue: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_queue
    env_file:
      - ../../../.env 
      - .env
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args: 
        BACKEND_PHP_VERSION: ${BACKEND_PHP_VERSION}
    working_dir: /home/app/source
    command: sh /home/app/main/start.sh
    volumes: 
      - ../../../source/backend:/home/app/source
      - ./queue:/home/app/main/
    depends_on: 
      - db-main
      - db-cache
      - db-queue
      - backend-server
    networks:
      - project
      
  # --- SET UP FRONTEND (WEB) --- # 
  frontend-web-server: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_frontend-web-server
    env_file:
      - ../../../.env 
      - .env
    image: ${FRONTEND_WEB_NGINX_VERSION}
    volumes:
      - ../../../source/frontend-mobile:/home/app/source
      - ./frontend-web/site.conf:/etc/nginx/conf.d/default.conf
      - ./@certs:/certs
    depends_on:
      - backend-server
    networks:
      - project

  # --- SET UP FRONTEND (MOBILE) --- # 
  frontend-mobile-server: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_frontend-mobile-server
    env_file:
      - ../../../.env 
      - .env
    image: ${FRONTEND_MOBILE_NGINX_VERSION}
    volumes:
      - ../../../source/frontend-mobile:/home/app/source
      - ./frontend-mobile/site.conf:/etc/nginx/conf.d/default.conf
      - ./@certs:/certs
    depends_on:
      - backend-server
    networks:
      - project

  # --- SET UP WEBSOCKETS --- # 
  websockets: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_websockets
    env_file:
      - ../../../.env 
      - .env
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args: 
        BACKEND_PHP_VERSION: ${BACKEND_PHP_VERSION}
    working_dir: /home/app/source
    command: sh /home/app/main/start.sh
    volumes: 
      - ../../../source/backend:/home/app/source
      - ./websockets:/home/app/main/
    depends_on: 
      - db-cache
      - db-main
      - db-queue
      - backend-server
    networks:
      - project

  websockets-server: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_websockets-server
    image: ${WEBSOCKETS_NGINX_VERSION}
    env_file:
      - ../../../.env 
      - .env
    volumes:
      - ./websockets/site.conf:/etc/nginx/conf.d/default.conf
      - ./@certs:/certs
    depends_on:
      - websockets
    networks:
      - project    

  # --- SETUP ROUTER --- # 
  router: 
    container_name: ${PROJECT_MODE}_${PROJECT_NAME}_router
    env_file:
      - ../../../.env 
      - .env
    image: ${ROUTER_NGINX_VERSION}
    volumes:
      - ./router/nginx.conf:/etc/nginx/nginx.conf
      - ./router/site.conf:/etc/nginx/conf.d/default.conf
      - ./router/stream.conf:/etc/nginx/stream.d/stream.conf
      - ./@certs:/certs
    depends_on:
      - frontend-web-server
      - frontend-mobile-server 
      - backend-server
      - db-main
      - db-cache
      - db-queue
    networks:
      - project


# --- SETUP NETWORKS --- #
networks:
  project:
    driver: bridge

# --- SETUP VOLUMES --- # 
volumes: 
  db-main:  
    driver: local 
  db-cache: 
    driver: local 
  db-queue: 
    driver: local
  postfix-data:
    driver: local
  mailpit-data: 
    driver: local
